How did viewing a diff between two versions of a file help you see the bug that was introduced?

Diffing the source for the working and buggy versions of the program helped correlate the bug 
in the source to the difference in behaviour between the two versionf of the program. It 
narrowed the possible search space which greatly reduced the time taken to find the bug.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

- Help avoid previously fixed bugs
- Experiment with the knowledge that we could revert the changes without penalty

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pros
  - Logical commits
Cons
  - Might miss a commit and lose work

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

A logical change might be spread out over multiple files. E.g. chaning a function's signature would require us to update code in every place that function is called.

How can you use the commands git log and git diff to view the history of files?

How might using version control make you more confident to make changes that could break something?

Previous state is always available and can be restored reliably and efficiently
